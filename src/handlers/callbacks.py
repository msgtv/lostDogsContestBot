import os

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
import pandas as pd

from src.invite import get_invite_link
from src.settings import DATA_FILENAME, DATA_DIR
from src.utils import load_data, save_data, is_channel_member


router = Router()


@router.callback_query(F.data.startswith('Card_'))
async def select_card_number(callback: CallbackQuery, state: FSMContext):
    global DATA_DF

    card_number = int(callback.data.split('_')[1])

    # –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ
    # —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:
    #  –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, firstname, lastname,
    #  login, date, card_number –∏ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

    user = callback.from_user

    invite_link = await get_invite_link(callback.message.bot, callback.from_user)
    invite_link = invite_link.invite_link

    data = {
        'date': callback.message.date,
        'user_id': str(user.id),
        'fullname': user.full_name,
        'username': user.username,
        'user_url': user.url,
        'invite_link': invite_link,
        'card_number': str(card_number),
    }

    data_filename = os.path.join(DATA_DIR, DATA_FILENAME)
    data_df = await load_data(data_filename)

    data_df = pd.concat([data_df, pd.DataFrame([data])], ignore_index=True)

    await save_data(data_df, data_filename)

    text = (f'–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É {card_number}!\n\n'
            f'–í–æ—Ç —Å—Å—ã–ª–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ '
            f'–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ:\n'
            f'{invite_link}\n\n'
            f'–£–¥–∞—á–∏üî•')

    await callback.message.edit_text(text)


@router.callback_query(F.data.startswith('CardWinner_'))
async def get_winner(callback: CallbackQuery):
    # –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    # —Ñ–∏–æ, –∏–¥, username, —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ,
    # –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞

    data_filename = os.path.join(DATA_DIR, DATA_FILENAME)
    data_df = await load_data(data_filename)

    if data_df.empty:
        await callback.message.answer('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!')
    else:
        winner_card_number = int(callback.data.split('_')[1])

        winner_df = data_df[data_df['card_number'] == winner_card_number]

        if winner_df.empty:
            await callback.message.edit_text(
                text='–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç!'
            )
        else:
            while True:
                random_row = winner_df.sample(n=1)
                winner_data = random_row.squeeze().to_dict()
                user_id = winner_data['user_id']

                is_member = await is_channel_member(callback.message.bot, int(user_id), '@odincryptan')

                if is_member:
                    break
                else:
                    winner_df = winner_df[winner_df['user_id'] != user_id]

                if winner_df.empty:
                    winner_data = None
                    break

            if winner_data is None:
                text = (f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!\n'
                        f'–ù–∏–∫—Ç–æ –∏–∑ —É–≥–∞–¥–∞–≤—à–∏—Ö –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @odincryptan!')

                await callback.message.edit_text(text)
            else:
                text = (f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!\n\n'
                        f'{winner_data['fullname']} @{winner_data['username']}\n'
                        f'–û–Ω –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É ‚Ññ{winner_data['card_number']}\n'
                        f'–ï–≥–æ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {winner_data['invite_link']}\n'
                        f'–û–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–∑–µ–π - –•')

                await callback.message.edit_text(text)


@router.callback_query(F.data == 'cancel')
async def cancel_btn(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.edit_text('–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è!')
